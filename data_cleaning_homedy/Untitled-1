{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2912 entries, 0 to 2911\n",
      "Data columns (total 41 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   Title                   2912 non-null   object \n",
      " 1   Price                   2912 non-null   object \n",
      " 2   Area                    2912 non-null   object \n",
      " 3   Address                 2912 non-null   object \n",
      " 4   Gen_descrip             2912 non-null   object \n",
      " 5   Loại hình               2909 non-null   object \n",
      " 6   Số phòng ngủ            1033 non-null   float64\n",
      " 7   Tình trạng pháp lý      1404 non-null   object \n",
      " 8   Ngày đăng               2912 non-null   object \n",
      " 9   Ngày hết hạn            2912 non-null   object \n",
      " 10  Loại tin                2912 non-null   object \n",
      " 11  ID tin                  2912 non-null   int64  \n",
      " 12  Bình nóng lạnh          859 non-null    float64\n",
      " 13  Máy hút mùi             777 non-null    float64\n",
      " 14  Tủ bếp                  802 non-null    float64\n",
      " 15  Bàn ăn                  738 non-null    float64\n",
      " 16  Kệ TV                   706 non-null    float64\n",
      " 17  Tủ trang trí            689 non-null    float64\n",
      " 18  Giường ngủ              694 non-null    float64\n",
      " 19  Bàn phấn                656 non-null    float64\n",
      " 20  Tủ quần áo              718 non-null    float64\n",
      " 21  Bồn tắm                 789 non-null    float64\n",
      " 22  Vòi hoa sen             869 non-null    float64\n",
      " 23  Bồn cầu                 870 non-null    float64\n",
      " 24  Bồn rửa mặt             869 non-null    float64\n",
      " 25  Bàn ghế P.khách         673 non-null    float64\n",
      " 26  Hướng nhà               712 non-null    object \n",
      " 27  Số tầng                 201 non-null    float64\n",
      " 28  Mặt tiền                63 non-null     object \n",
      " 29  Nội thất                157 non-null    object \n",
      " 30  Hướng ban công          85 non-null     object \n",
      " 31  Căn góc                 144 non-null    object \n",
      " 32  Đường vào               50 non-null     object \n",
      " 33  Chiều sâu               9 non-null      object \n",
      " 34  Đã bao gồm thuế?        6 non-null      object \n",
      " 35  Chính chủ hay không?    6 non-null      object \n",
      " 36  Sofa phòng khách        7 non-null      float64\n",
      " 37  Bàn trà                 7 non-null      float64\n",
      " 38  Đệm                     7 non-null      float64\n",
      " 39  Trần thả                7 non-null      float64\n",
      " 40  Tổng diện tích sử dụng  1 non-null      object \n",
      "dtypes: float64(20), int64(1), object(20)\n",
      "memory usage: 932.9+ KB\n",
      "['Title', 'Price', 'Area', 'Address', 'Gen_descrip', 'Loại hình', 'Số phòng ngủ', 'Tình trạng pháp lý', 'Ngày đăng', 'Ngày hết hạn', 'Loại tin', 'ID tin', 'Bình nóng lạnh', 'Máy hút mùi', 'Tủ bếp', 'Bàn ăn', 'Kệ TV', 'Tủ trang trí', 'Giường ngủ', 'Bàn phấn', 'Tủ quần áo', 'Bồn tắm', 'Vòi hoa sen', 'Bồn cầu', 'Bồn rửa mặt', 'Bàn ghế P.khách', 'Hướng nhà', 'Số tầng', 'Mặt tiền', 'Nội thất', 'Hướng ban công', 'Căn góc', 'Đường vào', 'Chiều sâu', 'Đã bao gồm thuế?', 'Chính chủ hay không?', 'Sofa phòng khách', 'Bàn trà', 'Đệm', 'Trần thả', 'Tổng diện tích sử dụng']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Price</th>\n",
       "      <th>Area</th>\n",
       "      <th>Address</th>\n",
       "      <th>Gen_descrip</th>\n",
       "      <th>Loại hình</th>\n",
       "      <th>Số phòng ngủ</th>\n",
       "      <th>Tình trạng pháp lý</th>\n",
       "      <th>Ngày đăng</th>\n",
       "      <th>Ngày hết hạn</th>\n",
       "      <th>...</th>\n",
       "      <th>Căn góc</th>\n",
       "      <th>Đường vào</th>\n",
       "      <th>Chiều sâu</th>\n",
       "      <th>Đã bao gồm thuế?</th>\n",
       "      <th>Chính chủ hay không?</th>\n",
       "      <th>Sofa phòng khách</th>\n",
       "      <th>Bàn trà</th>\n",
       "      <th>Đệm</th>\n",
       "      <th>Trần thả</th>\n",
       "      <th>Tổng diện tích sử dụng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>\\nBán tòa vp phố trung yên, kđt yên hòa, sát p...</td>\n",
       "      <td>\\n31\\nTỷ</td>\n",
       "      <td>\\n110\\nm2\\n</td>\n",
       "      <td>['Hà Nội', 'Quận Cầu Giấy', 'Mua bán Nhà riêng...</td>\n",
       "      <td>\\n\\nKĐT YÊN HÒA - PHÂN LÔ - 3 OTO TRÁNH - VỈA ...</td>\n",
       "      <td>Nhà riêng</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Sổ đỏ</td>\n",
       "      <td>11/10/2023</td>\n",
       "      <td>08/11/2023</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>\\nBán nhà Mỹ Đình - Nam Từ Liêm. Mặt ngõ ô tô ...</td>\n",
       "      <td>\\n5,95\\nTỷ</td>\n",
       "      <td>\\n31\\nm2\\n</td>\n",
       "      <td>['Hà Nội', 'Quận Nam Từ Liêm', 'Mua bán Nhà mặ...</td>\n",
       "      <td>\\nGia chủ cần bán gấp căn nhà ở mặt ngõ đường ...</td>\n",
       "      <td>Nhà mặt phố</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sổ hồng</td>\n",
       "      <td>11/10/2023</td>\n",
       "      <td>25/10/2023</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>\\nBán Toà VP phố Nghĩa Đô- 90m2x9 Tầng, Ô TÔ t...</td>\n",
       "      <td>\\n28\\nTỷ</td>\n",
       "      <td>\\n90\\nm2\\n</td>\n",
       "      <td>['Hà Nội', 'Quận Cầu Giấy', 'Mua bán Nhà riêng...</td>\n",
       "      <td>\\nPHỐ VIP NGHĨA ĐÔ- TOÀ NHÀ XÂY MỚI-KINH DOANH...</td>\n",
       "      <td>Nhà riêng</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sổ đỏ</td>\n",
       "      <td>11/10/2023</td>\n",
       "      <td>08/11/2023</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>\\nBán tòa nhà Văn Phòng 9 tầng mặt phố Vũ Tô...</td>\n",
       "      <td>\\n80\\nTỷ</td>\n",
       "      <td>\\n145\\nm2\\n</td>\n",
       "      <td>['Hà Nội', 'Quận Thanh Xuân', 'Mua bán Nhà mặt...</td>\n",
       "      <td>\\nCần bán gấp Tòa Nhà Văn Phòng VIP 9 tầng xây...</td>\n",
       "      <td>Nhà mặt phố</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sổ đỏ</td>\n",
       "      <td>11/10/2023</td>\n",
       "      <td>08/11/2023</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>\\nChính chủ cần bán nhanh căn góc Duplex PentS...</td>\n",
       "      <td>\\n4,6\\nTỷ</td>\n",
       "      <td>\\n76\\nm2\\n</td>\n",
       "      <td>['Mua bán Căn hộ chung cư  PentStudio']</td>\n",
       "      <td>\\nGia đình cần bán gấp căn hộ PentStudio diện ...</td>\n",
       "      <td>Căn hộ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sổ hồng</td>\n",
       "      <td>11/10/2023</td>\n",
       "      <td>08/11/2023</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               Title        Price  \\\n",
       "0  \\nBán tòa vp phố trung yên, kđt yên hòa, sát p...    \\n31\\nTỷ    \n",
       "1  \\nBán nhà Mỹ Đình - Nam Từ Liêm. Mặt ngõ ô tô ...  \\n5,95\\nTỷ    \n",
       "2  \\nBán Toà VP phố Nghĩa Đô- 90m2x9 Tầng, Ô TÔ t...    \\n28\\nTỷ    \n",
       "3  \\nBán tòa nhà Văn Phòng 9 tầng mặt phố Vũ Tô...    \\n80\\nTỷ    \n",
       "4  \\nChính chủ cần bán nhanh căn góc Duplex PentS...   \\n4,6\\nTỷ    \n",
       "\n",
       "          Area                                            Address  \\\n",
       "0  \\n110\\nm2\\n  ['Hà Nội', 'Quận Cầu Giấy', 'Mua bán Nhà riêng...   \n",
       "1   \\n31\\nm2\\n  ['Hà Nội', 'Quận Nam Từ Liêm', 'Mua bán Nhà mặ...   \n",
       "2   \\n90\\nm2\\n  ['Hà Nội', 'Quận Cầu Giấy', 'Mua bán Nhà riêng...   \n",
       "3  \\n145\\nm2\\n  ['Hà Nội', 'Quận Thanh Xuân', 'Mua bán Nhà mặt...   \n",
       "4   \\n76\\nm2\\n            ['Mua bán Căn hộ chung cư  PentStudio']   \n",
       "\n",
       "                                         Gen_descrip    Loại hình  \\\n",
       "0  \\n\\nKĐT YÊN HÒA - PHÂN LÔ - 3 OTO TRÁNH - VỈA ...    Nhà riêng   \n",
       "1  \\nGia chủ cần bán gấp căn nhà ở mặt ngõ đường ...  Nhà mặt phố   \n",
       "2  \\nPHỐ VIP NGHĨA ĐÔ- TOÀ NHÀ XÂY MỚI-KINH DOANH...    Nhà riêng   \n",
       "3  \\nCần bán gấp Tòa Nhà Văn Phòng VIP 9 tầng xây...  Nhà mặt phố   \n",
       "4  \\nGia đình cần bán gấp căn hộ PentStudio diện ...       Căn hộ   \n",
       "\n",
       "   Số phòng ngủ Tình trạng pháp lý    Ngày đăng Ngày hết hạn  ... Căn góc  \\\n",
       "0           7.0              Sổ đỏ   11/10/2023   08/11/2023  ...     NaN   \n",
       "1           NaN            Sổ hồng   11/10/2023   25/10/2023  ...     NaN   \n",
       "2           NaN              Sổ đỏ   11/10/2023   08/11/2023  ...     NaN   \n",
       "3           NaN              Sổ đỏ   11/10/2023   08/11/2023  ...     NaN   \n",
       "4           NaN            Sổ hồng   11/10/2023   08/11/2023  ...     NaN   \n",
       "\n",
       "   Đường vào  Chiều sâu  Đã bao gồm thuế?  Chính chủ hay không?  \\\n",
       "0        NaN        NaN               NaN                   NaN   \n",
       "1        NaN        NaN               NaN                   NaN   \n",
       "2        NaN        NaN               NaN                   NaN   \n",
       "3        NaN        NaN               NaN                   NaN   \n",
       "4        NaN        NaN               NaN                   NaN   \n",
       "\n",
       "   Sofa phòng khách  Bàn trà  Đệm  Trần thả  Tổng diện tích sử dụng  \n",
       "0               NaN      NaN  NaN       NaN                     NaN  \n",
       "1               NaN      NaN  NaN       NaN                     NaN  \n",
       "2               NaN      NaN  NaN       NaN                     NaN  \n",
       "3               NaN      NaN  NaN       NaN                     NaN  \n",
       "4               NaN      NaN  NaN       NaN                     NaN  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/home/nmh/ds/project/data_cleaning_homedy/homedy/homedy_concat.csv\")\n",
    "df.info()\n",
    "print(df.columns.tolist())\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Title                     2912\n",
      "Ngày đăng                 2912\n",
      "ID tin                    2912\n",
      "Price                     2912\n",
      "Ngày hết hạn              2912\n",
      "Loại tin                  2912\n",
      "Gen_descrip               2912\n",
      "Address                   2912\n",
      "Area                      2912\n",
      "Loại hình                 2909\n",
      "Tình trạng pháp lý        1404\n",
      "Số phòng ngủ              1033\n",
      "Bồn cầu                    870\n",
      "Bồn rửa mặt                869\n",
      "Vòi hoa sen                869\n",
      "Bình nóng lạnh             859\n",
      "Tủ bếp                     802\n",
      "Bồn tắm                    789\n",
      "Máy hút mùi                777\n",
      "Bàn ăn                     738\n",
      "Tủ quần áo                 718\n",
      "Hướng nhà                  712\n",
      "Kệ TV                      706\n",
      "Giường ngủ                 694\n",
      "Tủ trang trí               689\n",
      "Bàn ghế P.khách            673\n",
      "Bàn phấn                   656\n",
      "Số tầng                    201\n",
      "Nội thất                   157\n",
      "Căn góc                    144\n",
      "Hướng ban công              85\n",
      "Mặt tiền                    63\n",
      "Đường vào                   50\n",
      "Chiều sâu                    9\n",
      "Sofa phòng khách             7\n",
      "Bàn trà                      7\n",
      "Đệm                          7\n",
      "Trần thả                     7\n",
      "Đã bao gồm thuế?             6\n",
      "Chính chủ hay không?         6\n",
      "Tổng diện tích sử dụng       1\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "previous_non_empty_counts = df.count()\n",
    "sorted_counts = previous_non_empty_counts.sort_values(ascending=False)\n",
    "print(sorted_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Title                      object\n",
       "Price                      object\n",
       "Area                       object\n",
       "Address                    object\n",
       "Gen_descrip                object\n",
       "Loại hình                  object\n",
       "Số phòng ngủ              float64\n",
       "Tình trạng pháp lý         object\n",
       "Ngày đăng                  object\n",
       "Ngày hết hạn               object\n",
       "Loại tin                   object\n",
       "ID tin                      int64\n",
       "Bình nóng lạnh            float64\n",
       "Máy hút mùi               float64\n",
       "Tủ bếp                    float64\n",
       "Bàn ăn                    float64\n",
       "Kệ TV                     float64\n",
       "Tủ trang trí              float64\n",
       "Giường ngủ                float64\n",
       "Bàn phấn                  float64\n",
       "Tủ quần áo                float64\n",
       "Bồn tắm                   float64\n",
       "Vòi hoa sen               float64\n",
       "Bồn cầu                   float64\n",
       "Bồn rửa mặt               float64\n",
       "Bàn ghế P.khách           float64\n",
       "Hướng nhà                  object\n",
       "Số tầng                   float64\n",
       "Mặt tiền                   object\n",
       "Nội thất                   object\n",
       "Hướng ban công             object\n",
       "Căn góc                    object\n",
       "Đường vào                  object\n",
       "Chiều sâu                  object\n",
       "Đã bao gồm thuế?           object\n",
       "Chính chủ hay không?       object\n",
       "Sofa phòng khách          float64\n",
       "Bàn trà                   float64\n",
       "Đệm                       float64\n",
       "Trần thả                  float64\n",
       "Tổng diện tích sử dụng     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Sổ đỏ' 'Sổ hồng' nan 'Giấy tờ hợp lệ' 'Sổ trắng'\n",
      " 'Giấy chứng nhận quyền sở hữu']\n"
     ]
    }
   ],
   "source": [
    "unique_values = df['Tình trạng pháp lý'].unique()\n",
    "print(unique_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_address_components(address):\n",
    "    if not isinstance(address, str):\n",
    "        return [\"\", \"\", \"\"]\n",
    "    address_parts = re.findall(r\"'([^']*)'\", address)\n",
    "\n",
    "    district, ward, street = \"\", \"\", \"\"\n",
    "\n",
    "    # Extract district\n",
    "    if len(address_parts) > 1:\n",
    "        if 'Quận' in address_parts[1]:\n",
    "            district = address_parts[1].split('Quận ')[-1]\n",
    "        if 'Huyện' in address_parts[1]:\n",
    "            district = address_parts[1].split('Huyện ')[-1]\n",
    "\n",
    "    # Extract ward or street\n",
    "    if len(address_parts) > 2:\n",
    "        address_component = address_parts[2]\n",
    "        if 'Quận' in address_component:\n",
    "            district = address_component.split('Quận ')[-1]\n",
    "        if 'Huyện' in address_component:\n",
    "            district = address_component.split('Huyện ')[-1]\n",
    "        if 'Phường' in address_component:\n",
    "            ward = address_component.split('Phường ')[-1]\n",
    "        if 'Xã' in address_component:\n",
    "            ward = address_component.split('Xã ')[-1]\n",
    "        if 'Đường' in address_component:\n",
    "            street = address_component.split('Đường ')[-1]\n",
    "        if 'Phố' in address_component:\n",
    "            street = address_component.split('Phố ')[-1]\n",
    "\n",
    "    return [street, ward, district]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['', '', 'Hoàng Mai']\n"
     ]
    }
   ],
   "source": [
    "address = extract_address_components(\"['Hà Nội', 'Mua bán Nhà riêng tại Quận Hoàng Mai']\")\n",
    "print(address)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_average(range_str):\n",
    "    parts = range_str.strip().split('-')\n",
    "    # for part in parts:\n",
    "        # print(part)\n",
    "    if len(parts) == 2:\n",
    "        try:\n",
    "            lower_bound = float(parts[0].strip().replace(',', '.'))\n",
    "            upper_bound = float(parts[1].strip().replace(',', '.'))\n",
    "            return (lower_bound + upper_bound) / 2\n",
    "        except ValueError:\n",
    "            return None\n",
    "    else:\n",
    "        try:\n",
    "            # print(float(parts[0]))\n",
    "            return float(parts[0].strip().replace(',', '.'))\n",
    "        except ValueError:\n",
    "            return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_area(area_str):\n",
    "    if not isinstance(area_str, str):\n",
    "        return None\n",
    "\n",
    "    # Cleaning and converting area\n",
    "    area = calculate_average(area_str.replace('m2', '').replace(' ', ''))\n",
    "\n",
    "    return area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.0\n"
     ]
    }
   ],
   "source": [
    "area_str = \"35 - 55m2\"\n",
    "\n",
    "print(convert_area(area_str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_price(price_str, area_str):\n",
    "    if not isinstance(price_str, str) and not isinstance(area_str, str):\n",
    "        return None\n",
    "    price_str = price_str.lower().replace(',', '.').strip()\n",
    "    # print(price_str)\n",
    "    area = convert_area(area_str)\n",
    "    # print(area)\n",
    "\n",
    "    price = None\n",
    "    \n",
    "    if '/tháng' in price_str:\n",
    "        return None\n",
    "    if 'tỷ' in price_str:\n",
    "        new_price_str = price_str.replace('tỷ VNĐ', '').replace('tỷ', '')\n",
    "        # print(\"start calculate for price\")\n",
    "        price = calculate_average(new_price_str)\n",
    "        # print(price)\n",
    "        if price is not None:\n",
    "            return price * 1000  # Convert from 'tỷ' to 'triệu'\n",
    "    elif 'triệu' in price_str:\n",
    "        price_str = price_str.replace(' triệu VNĐ', '').replace(' triệu', '')\n",
    "        price = calculate_average(price_str)\n",
    "        return price\n",
    "    elif '/m2' in price_str:\n",
    "        price_str = price_str.replace('/m2', '')\n",
    "        price_per_m2 = calculate_average(price_str)\n",
    "        if price_per_m2 is not None and area is not None:\n",
    "            return price_per_m2 * area\n",
    "\n",
    "    if price is None or area is None:\n",
    "        return None\n",
    "\n",
    "    return price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2900.0\n"
     ]
    }
   ],
   "source": [
    "price = \"2,9Tỷ \"\n",
    "area = \"33m2\"\n",
    "print(convert_price(price, area))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_direction(direction_str):\n",
    "    direction_map = {\n",
    "        'đông': 'E', 'tây': 'W', 'nam': 'S', 'bắc': 'N',\n",
    "        'tây-bắc': 'WN', 'tây-nam': 'WS', 'đông-bắc': 'EN', 'đông-nam': 'ES'\n",
    "    }\n",
    "    direction_str = direction_str.lower().strip() if isinstance(direction_str, str) else direction_str\n",
    "    return direction_map.get(direction_str, \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_to_numeric(value):\n",
    "    if isinstance(value, str):\n",
    "        value = value.replace('m', '').replace(',', '.')\n",
    "        try:\n",
    "            return float(value)\n",
    "        except ValueError:\n",
    "            return None\n",
    "    return value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['id'] = df['ID tin']\n",
    "\n",
    "df[['street', 'ward', 'district']] = df['Address'].fillna(\"\").apply(lambda x: pd.Series(extract_address_components(x)))\n",
    "df['city'] = 'Hà Nội'\n",
    "\n",
    "df['area'] = df['Area'].apply(convert_area)\n",
    "\n",
    "df['price'] = df.apply(lambda row: convert_price(row['Price'], row['Area']), axis=1)\n",
    "\n",
    "if 'Hướng nhà' in df.columns and df['Hướng nhà'].notnull().any():\n",
    "    df['house_direction'] = df['Hướng nhà'].apply(clean_direction)\n",
    "else:\n",
    "    df['house_direction'] = None\n",
    "\n",
    "if 'Số phòng ngủ' in df.columns:\n",
    "    df['bedroom'] = pd.to_numeric(df['Số phòng ngủ'], errors='coerce')\n",
    "else:\n",
    "    df['bedroom'] = None\n",
    "\n",
    "if 'Bồn cầu' in df.columns:\n",
    "    df['toilet'] = pd.to_numeric(df['Bồn cầu'], errors='coerce')\n",
    "else:\n",
    "    df['toilet'] = None\n",
    "\n",
    "if 'Số tầng' in df.columns:\n",
    "    df['floors'] = pd.to_numeric(df['Số tầng'], errors='coerce')\n",
    "else:\n",
    "    df['floors'] = None\n",
    "\n",
    "if 'Ngày đăng' in df.columns:\n",
    "    df['upload_date'] = df['Ngày đăng']\n",
    "else:\n",
    "    df['date'] = None\n",
    "\n",
    "if 'Nội thất' in df.columns:\n",
    "    df['furniture'] = df['Nội thất']\n",
    "else:\n",
    "    df['furniture'] = None\n",
    "\n",
    "if 'Tình trạng pháp lý' in df.columns:\n",
    "    df['legits'] = df['Tình trạng pháp lý']\n",
    "else:\n",
    "    df['legits'] = None\n",
    "\n",
    "# df['facade'] = pd.to_numeric(df['Mặt tiền'], errors='coerce') if 'Mặt tiền' in df.columns else None\n",
    "if 'Mặt tiền' in df.columns and df['Mặt tiền'].notnull().any():\n",
    "    df['facade'] = df['Mặt tiền'].apply(convert_to_numeric)\n",
    "else:\n",
    "    df['facade'] = None\n",
    "\n",
    "if 'Đường vào' in df.columns and df['Đường vào'].notnull().any():\n",
    "    df['entrance'] = df['Đường vào'].apply(convert_to_numeric)\n",
    "else:\n",
    "    df['entrance'] = None\n",
    "# df['entrance'] = pd.to_numeric(df['Đường vào'], errors='coerce') if 'Đường vào' in df.columns else None\n",
    "\n",
    "df = df[df['price'].notnull()]\n",
    "\n",
    "final_columns = ['id', 'city', 'district', 'ward', 'street', 'area', 'price', 'house_direction', \n",
    "                         'bedroom', 'toilet', 'floors', 'legits','upload_date', 'furniture', \n",
    "                         'facade', 'entrance']\n",
    "df_final = df[final_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id                    0\n",
      "city                  0\n",
      "district            904\n",
      "ward               2084\n",
      "street             1199\n",
      "area                 59\n",
      "price                 0\n",
      "house_direction    1789\n",
      "bedroom            1446\n",
      "toilet             1641\n",
      "floors             2155\n",
      "legits             1220\n",
      "upload_date           0\n",
      "furniture          2205\n",
      "facade             2238\n",
      "entrance           2249\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# df_final.info()\n",
    "empty_or_none_count = df_final.apply(lambda x: x.isna() | (x == '')).sum()\n",
    "print(empty_or_none_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id                 2283\n",
      "city               2283\n",
      "district           2283\n",
      "ward               2283\n",
      "street             2283\n",
      "area               2224\n",
      "price              2283\n",
      "house_direction    2283\n",
      "bedroom             837\n",
      "toilet              642\n",
      "floors              128\n",
      "legits             1063\n",
      "upload_date        2283\n",
      "furniture            78\n",
      "facade               45\n",
      "entrance             34\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "non_empty_counts = df_final.count()\n",
    "print(non_empty_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# combined_df = pd.concat(all_dfs, ignore_index=True)\n",
    "df_final.to_csv('cleaned_data.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of Missing Values per Column:\n",
      "id                  0.000000\n",
      "city                0.000000\n",
      "district           39.597021\n",
      "ward               91.283399\n",
      "street             52.518616\n",
      "area                2.584319\n",
      "price               0.000000\n",
      "house_direction    78.361805\n",
      "bedroom            63.337714\n",
      "toilet             71.879106\n",
      "floors             94.393342\n",
      "legits             53.438458\n",
      "upload_date         0.000000\n",
      "furniture          96.583443\n",
      "facade             98.028909\n",
      "entrance           98.510731\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "missing_percentages = df_final.apply(lambda x: x.isna() | (x == '')).mean() * 100\n",
    "\n",
    "print(\"Percentage of Missing Values per Column:\")\n",
    "print(missing_percentages)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
